from heapq import *

class Meeting:
    def __init__(self, start, end):
        self.start = start
        self.end = end
    def __str__(self) -> str:
      return f"[{self.start}, {self.end}]"

    @staticmethod
    def print_meetings(meetings):
        for item in meetings:
            print(item, end='')
        print()


def min_meeting_rooms(meetings):
    # we need to find the max number of intervals overlapping at any given moment
    # first, we can sort the meetings by start time
    Meeting.print_meetings(meetings)
    meetings.sort(key=lambda x: x.start)
    Meeting.print_meetings(meetings)

    # next, we traverse the meetings, and check if two meetings overlap

def main():
  print("Minimum meeting rooms required: " + str(min_meeting_rooms(
    [Meeting(4, 5), Meeting(2, 3), Meeting(2, 4), Meeting(3, 5)])))
  print("Minimum meeting rooms required: " +
        str(min_meeting_rooms([Meeting(1, 4), Meeting(2, 5), Meeting(7, 9)])))
  print("Minimum meeting rooms required: " +
        str(min_meeting_rooms([Meeting(6, 7), Meeting(2, 4), Meeting(8, 12)])))
  print("Minimum meeting rooms required: " +
        str(min_meeting_rooms([Meeting(1, 4), Meeting(2, 3), Meeting(3, 6)])))
  print("Minimum meeting rooms required: " + str(min_meeting_rooms(
    [Meeting(4, 5), Meeting(2, 3), Meeting(2, 4), Meeting(3, 5)])))


main()
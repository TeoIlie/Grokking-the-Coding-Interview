class Node:
  def __init__(self, value, next=None):
    self.value = value
    self.next = next
  def __str__(self) -> str:
      return str(self.value)

  def print_list(self):
    temp = self
    while temp is not None:
      print(temp.value, end=" ")
      temp = temp.next
    print()


def reverse_sub_list(head, p, q):
    end_of_start_lst = None
    temp = head

    for i in range(1, q):
        if i == p - 1:
            end_of_start_lst = temp
        temp = temp.next

    start_of_end_lst = temp.next
    print('end of start', end_of_start_lst)
    print('start of end', start_of_end_lst)

    # reverse from q to p
    previous, next = None, None
    if p > 1:
        current = end_of_start_lst.next
    else:
        current = head

    for i in range(q - p + 1):
        print("reversing", i, current)
        next = current.next  # temporarily store the next node
        current.next = previous  # reverse the current node
        print(current, '->', current.next)
        previous = current  # before we move to the next node, point previous to the current node
        current = next  # move on the next node
        print('p,c,n', previous, current, next)

    reversed_head = previous
    print(reversed_head)
    if p > 1:
        reversed_end = end_of_start_lst.next
    else:
        reversed_end = head
    print(reversed_end)

    # now point end_of_start to reversed_head
    if p > 1:
        end_of_start_lst.next = reversed_head
    else:
        head = reversed_head

    # now point reversed_end to start_of_end
    reversed_end.next = start_of_end_lst

    return head

def reverse(head):
  previous, current, next = None, head, None
  while current is not None:
    next = current.next  # temporarily store the next node
    current.next = previous  # reverse the current node
    previous = current  # before we move to the next node, point previous to the current node
    current = next  # move on the next node
  return previous

def main():
  head = Node(1)
  head.next = Node(2)
  head.next.next = Node(3)
  head.next.next.next = Node(4)
  head.next.next.next.next = Node(5)

  print("Nodes of original LinkedList are: ", end='')
  head.print_list()
  result = reverse_sub_list(head, 1, 3)
  print("Nodes of partially reversed LinkedList are: ", end='')
  result.print_list()


main()